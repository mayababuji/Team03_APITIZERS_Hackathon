{
	"info": {
		"_postman_id": "b3db8201-35ca-46dc-b455-f3a57970159a",
		"name": "TEAM3APITIZERS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45210294",
		"_collection_link": "https://mayababuji-8939053.postman.co/workspace/TEAM3APITIZERS~7925177a-f42a-4283-8e7e-125bd7339a45/collection/45210294-b3db8201-35ca-46dc-b455-f3a57970159a?action=share&source=collection_link&creator=45210294"
	},
	"item": [
		{
			"name": "User login using admin credentials Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							" ",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"admin_token\", jsonData.token);",
							"",
							"    pm.test(\"token is present in response\", function () {",
							"        try {",
							"            pm.expect(jsonData).to.have.property(\"token\");",
							"            pm.expect(jsonData).to.have.property(\"type\");",
							"            pm.expect(jsonData).to.have.property(\"userId\");",
							"            pm.expect(jsonData).to.have.property(\"type\");",
							"            pm.expect(jsonData).to.have.property(\"loginUserEmail\");",
							"            pm.expect(jsonData).to.have.property(\"type\");",
							"        } catch (e) {",
							"            pm.expect.fail(\"Response is not valid in JSON\");",
							"        }",
							"    });",
							"",
							"//check schema validation of response body",
							"    const schema = {",
							"        type: \"object\",",
							"        required: [\"token\", \"type\", \"userId\", \"loginUserEmail\", \"roles\"],",
							"        properties: {",
							"            token: { type: \"string\" },",
							"            type: { type: \"string\" },",
							"            userId: { type: \"number\" },",
							"            loginUserEmail: { type: \"string\" , format: \"email\" },",
							"            roles: { type: \"array\", items: { type: \"string\" } }  ",
							"        }",
							"    };",
							"",
							"    pm.test(\"Schema of response body is valid\", function () {",
							"        pm.response.to.have.jsonSchema(schema);",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userLoginEmail\": \"Team707@gmail.com\",\n  \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creates a dietician with given dietician DTO Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							" ",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"//store response data in collection variables for future use.",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"dietician_id\", jsonData.id);",
							"pm.collectionVariables.set(\"login_Password\", jsonData.loginPassword);",
							"pm.collectionVariables.set(\"dietician_email\", jsonData.Email);",
							"",
							"// validating response for auto-generated fields",
							"pm.test(\"Check loginPassword and ID are generated\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.loginPassword).to.not.be.null;",
							"    pm.expect(jsonData.id).to.not.be.null;",
							"    // Validate response matches request body data",
							"    pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"dieticianEmail\"));",
							"    pm.expect(jsonData.Firstname).to.eql(pm.iterationData.get(\"dieticianFirstname\"));",
							"    pm.expect(jsonData.Lastname).to.eql(pm.iterationData.get(\"dieticianLastname\"));",
							"    //pm.expect(jsonData.DateOfBirth).to.eql(pm.iterationData.get(\"DateOfBirth\"));",
							"    pm.expect(jsonData.DateOfBirth).to.eql(pm.iterationData.get(\"dieticianDateOfBirth\").substring(0,Â 10));",
							"    pm.expect(jsonData.ContactNumber).to.eql(pm.iterationData.get(\"dieticianContactNumber\").toString());",
							"    pm.expect(jsonData.Education).to.eql(pm.iterationData.get(\"Education\"));",
							"    pm.expect(jsonData.HospitalName).to.eql(pm.iterationData.get(\"HospitalName\"));",
							"    pm.expect(jsonData.HospitalStreet).to.eql(pm.iterationData.get(\"HospitalStreet\"));",
							"    pm.expect(jsonData.HospitalCity).to.eql(pm.iterationData.get(\"HospitalCity\"));",
							"    pm.expect(jsonData.HospitalPincode).to.eql(pm.iterationData.get(\"HospitalPincode\").toString());",
							" });",
							" ",
							"// Specific field validations for errors",
							"// pm.test(\"Check error message or error fields\", function () {",
							"//     let jsonData = pm.response.json();",
							"//     if (pm.response.code === 400 || pm.response.code === 409) {",
							"//         pm.expect(jsonData.message || jsonData.error).to.not.be.null;",
							"//     }",
							"// });",
							"",
							"// //let jsonData = pm.response.json();",
							"// pm.test(\"Status code is 400 for invalid first and last name\", function () {",
							"//     pm.response.to.have.status(400);",
							"// });",
							"// pm.test(\"First and Last name validation errors for invalid input\", function () {",
							"//     let jsonData = pm.response.json();",
							"//     pm.expect(jsonData.firstName).to.eql(\"FirstName should only contain Alphabets\");",
							"//     pm.expect(jsonData.lastName).to.eql(\"LastName should only contain Alphabets\");",
							"// });",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Firstname\": \"{{dieticianFirstname}}\",\n  \"Lastname\": \"{{dieticianLastname}}\",\n  \"ContactNumber\": \"{{dieticianContactNumber}}\",\n  \"DateOfBirth\": \"{{dieticianDateOfBirth}}\",\n  \"Email\": \"{{dieticianEmail}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/dietician",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"dietician"
					]
				}
			},
			"response": []
		},
		{
			"name": "User login using dietician credential Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							" ",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"dietician_token\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userLoginEmail\": \"{{dietician_email}}\",\n  \"password\": \"{{login_Password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new Patient Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							" ",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"//store patient_id in collection variable for future use.",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"patient_id\", jsonData.patientId);",
							"",
							"//check if response contains patientId and FirstName, LastName etc.",
							"pm.test(\"patientId and other variables are present in response\", function () {",
							"    try {",
							"        //var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"patientId\");",
							"        pm.expect(jsonData).to.have.property(\"FirstName\");",
							"        pm.expect(jsonData).to.have.property(\"LastName\");",
							"        pm.expect(jsonData).to.have.property(\"ContactNumber\");",
							"        pm.expect(jsonData).to.have.property(\"Email\");",
							"        pm.expect(jsonData).to.have.property(\"Allergy\");",
							"        pm.expect(jsonData).to.have.property(\"FoodPreference\");",
							"        pm.expect(jsonData).to.have.property(\"CuisineCategory\");",
							"        pm.expect(jsonData).to.have.property(\"DateOfBirth\");",
							"        pm.expect(jsonData).to.have.property(\"DieticianId\");",
							"    } catch (e) {",
							"        pm.expect.fail(\"Response after creatting patient is not valid in JSON\");",
							"    }",
							"});",
							"",
							"// Get the first (and only) key from Vitals",
							"let fileID = Object.keys(jsonData.Vitals)[0];",
							"// Save it as a collection variable",
							"pm.collectionVariables.set(\"fileID\", fileID);",
							"console.log(\"fileID set to:\", fileID);",
							"",
							"pm.test(\"Vitals and other properties are present in response\", function () {",
							"    try {",
							"        //var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"Vitals\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"Weight\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"Height\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"Temperature\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"SP\");",
							"        pm.expect(jsonData.Vitals[fileID]).to.have.property(\"DP\");",
							"    } catch (e) {",
							"        pm.expect.fail(\"Vitals is not valid JSON\");",
							"    }",
							"});",
							"",
							"//validate actual and expected data",
							"pm.test(\"Patient first name matches expected\", function() {",
							"    pm.expect(jsonData.FirstName).to.eql(pm.iterationData.get(\"patientFirstName\"));",
							"});",
							"",
							"pm.test(\"Patient LastName matches expected\", function() {",
							"    pm.expect(jsonData.LastName).to.eql(pm.iterationData.get(\"patientLastName\"));",
							"});",
							"",
							"pm.test(\"Patient ContactNumber matches expected\", function() {",
							"    pm.expect(jsonData.ContactNumber).to.eql(String(pm.iterationData.get(\"patientContactNumber\")));",
							"});",
							"",
							"pm.test(\"Patient Email matches expected\", function() {",
							"    pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"patientEmail\"));",
							"});",
							"",
							"pm.test(\"Patient Allergy matches expected\", function() {",
							"    pm.expect(jsonData.Allergy).to.eql(pm.iterationData.get(\"Allergy\"));",
							"});",
							"",
							"pm.test(\"Patient FoodPreference matches expected\", function() {",
							"    pm.expect(jsonData.FoodPreference).to.eql(pm.iterationData.get(\"FoodPreference\"));",
							"});",
							"",
							"pm.test(\"Patient CuisineCategory matches expected\", function() {",
							"    pm.expect(jsonData.CuisineCategory).to.eql(pm.iterationData.get(\"CuisineCategory\"));",
							"});",
							"",
							"pm.test(\"Patient DateOfBirth matches expected\", function() {",
							"    pm.expect(jsonData.DateOfBirth).to.eql(pm.iterationData.get(\"patientDateOfBirth\"));",
							"});",
							"",
							"pm.test(\"patientWeight matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].Weight).to.eql(pm.iterationData.get(\"patientWeight\"));",
							"});",
							"",
							"pm.test(\"patientHeight matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].Height).to.eql(pm.iterationData.get(\"patientHeight\"));",
							"});",
							"",
							"pm.test(\"patientTemp matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].Temperature).to.eql(pm.iterationData.get(\"patientTemp\"));",
							"});",
							"",
							"pm.test(\"patientSP matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].SP).to.eql(pm.iterationData.get(\"patientSP\"));",
							"});",
							"",
							"pm.test(\"patientDP matches expected\", function() {",
							"    pm.expect(jsonData.Vitals[fileID].DP).to.eql(pm.iterationData.get(\"patientDP\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"    // Build patientInfo JSON dynamically",
							"    let patientInfo = {",
							"        \"FirstName\": pm.iterationData.get(\"patientFirstName\"),",
							"        \"LastName\": pm.iterationData.get(\"patientLastName\"),",
							"        \"ContactNumber\": pm.iterationData.get(\"patientContactNumber\"),",
							"        \"Email\": pm.iterationData.get(\"patientEmail\"),",
							"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
							"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
							"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
							"        \"DateOfBirth\": pm.iterationData.get(\"patientDateOfBirth\")",
							"    };",
							"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
							"",
							"// Build vitalInfo JSON dynamically",
							"    let vitals = {",
							"        \"Height\": pm.iterationData.get(\"patientHeight\"),",
							"        \"Weight\": pm.iterationData.get(\"patientWeight\"),",
							"        \"Temperature\": pm.iterationData.get(\"patientTemp\"),",
							"        \"SP\": pm.iterationData.get(\"patientSP\"),",
							"        \"DP\": pm.iterationData.get(\"patientDP\")",
							"    };",
							"pm.collectionVariables.set(\"vitalInfo\", JSON.stringify(vitals));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dietician_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "patientInfo",
							"value": "{{patientInfo}}",
							"type": "text"
						},
						{
							"key": "vitals",
							"value": "{{vitalInfo}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/Users/maya/Downloads/Sample reports/HyperThyroid_Report_final.pdf"
						}
					]
				},
				"url": {
					"raw": "{{baseURL}}/patient",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patients details by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 200",
							"pm.test(\"Test 1 : Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2. Response is an object",
							"pm.test(\"Response is an object\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(typeof data).to.equal(\"object\");",
							"});",
							"// 3. Response is an object is not empty",
							"pm.test(\"Test 3: Response object is not empty\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(Object.keys(data).length).to.be.above(0);",
							"});",
							"// 4. Patient expected fields are present in the response object.",
							"pm.test(\"Test 4: Patient object has expected fields\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data).to.have.all.keys(",
							"        \"patientId\",",
							"        \"FirstName\",",
							"        \"LastName\",",
							"        \"ContactNumber\",",
							"        \"Email\",",
							"        \"Allergy\",",
							"        \"FoodPreference\",",
							"        \"CuisineCategory\",",
							"        \"FileMorbidity\",",
							"        \"FileMorbidityCondition\",",
							"        \"DateOfBirth\",",
							"        \"DieticianId\",",
							"        \"Vitals\",",
							"        \"LastVisitDate\"",
							"    );",
							"});",
							"",
							"// 5. Content-Type header is application/json",
							"pm.test(\"Test 5: Content-Type header is application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// 6. Status text is OK",
							"pm.test(\"Test 6: Status text is OK\", () => {",
							"    pm.expect(pm.response.status).to.eql(\"OK\");",
							"});",
							"// 7. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
							"pm.test(\"Test 7: Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals\", () => {",
							"    let data = pm.response.json();",
							"",
							"    // Check FileMorbidity",
							"    pm.expect(data.FileMorbidity).to.be.an(\"object\");",
							"    let fileIdsMorbidity = Object.keys(data.FileMorbidity);",
							"    pm.expect(fileIdsMorbidity.length).to.be.above(0);",
							"    console.log(\"FileMorbidity fileIds:\", fileIdsMorbidity);",
							"",
							"    // Check FileMorbidityCondition",
							"    pm.expect(data.FileMorbidityCondition).to.be.an(\"object\");",
							"    let fileIdsCondition = Object.keys(data.FileMorbidityCondition);",
							"    pm.expect(fileIdsCondition.length).to.be.above(0);",
							"    console.log(\"FileMorbidityCondition fileIds:\", fileIdsCondition);",
							"",
							"    // Check Vitals",
							"    pm.expect(data.Vitals).to.be.an(\"object\");",
							"    let fileIdsVitals = Object.keys(data.Vitals);",
							"    pm.expect(fileIdsVitals.length).to.be.above(0);",
							"    console.log(\"Vitals fileIds:\", fileIdsVitals);",
							"",
							"    // Optional: Validate the same fileId exists across all three (if business logic requires)",
							"    let commonFileIds = fileIdsMorbidity.filter(id => fileIdsCondition.includes(id) && fileIdsVitals.includes(id));",
							"    pm.expect(commonFileIds.length).to.be.above(0);",
							"    console.log(\"Common fileIds across all three:\", commonFileIds);",
							"});",
							"",
							"// 8. Validate fileId exists in FileMorbidity, FileMorbidityCondition, and Vitals",
							"pm.test(\"Test 8: Field types are correct\", () => {",
							"    let data = pm.response.json();",
							"",
							"    pm.expect(data.patientId).to.be.a(\"number\");",
							"    pm.expect(data.FirstName).to.be.a(\"string\");",
							"    pm.expect(data.LastName).to.be.a(\"string\");",
							"    pm.expect(data.ContactNumber).to.be.a(\"string\");",
							"    pm.expect(data.Email).to.be.a(\"string\");",
							"    pm.expect(data.Allergy).to.be.a(\"string\");",
							"    pm.expect(data.FoodPreference).to.be.a(\"string\");",
							"    pm.expect(data.CuisineCategory).to.be.a(\"string\");",
							"    pm.expect(data.DateOfBirth).to.be.a(\"string\");",
							"    pm.expect(data.DieticianId).to.be.a(\"number\");",
							"});",
							"",
							"//9 email format validation",
							"pm.test(\"Test 9:  Email format is valid\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.Email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"});",
							"",
							"//10 Contact number is valid 10 digits",
							"pm.test(\"Test 10: Contact number is valid 10 digits\", () => {",
							"    let data = pm.response.json();",
							"    pm.expect(data.ContactNumber).to.match(/^\\d{10}$/);",
							"});",
							"",
							"//11 Date of Birth is a valid date",
							"pm.test(\"Test 11: Date of Birth is a valid date\", () => {",
							"    let data = pm.response.json();",
							"    let dob = Date.parse(data.DateOfBirth);",
							"    pm.expect(isNaN(dob)).to.be.false;",
							"});",
							"//12 Allergy, FoodPreference, CuisineCategory are valid values",
							"pm.test(\"Test 12: Allergy, FoodPreference, CuisineCategory are valid values\", () => {",
							"    let data = pm.response.json();",
							"",
							"    const allowedAllergies = [\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"];",
							"    const allowedPreferences = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggitarian\", \"NonVeg\"];",
							"    const allowedCuisine = [\"Indian\", \"South Indian\", \"Rajasthani\", \"Punjabi\", /*... add rest */];",
							"",
							"    pm.expect(allowedAllergies).to.include(data.Allergy);",
							"    pm.expect(allowedPreferences).to.include(data.FoodPreference);",
							"    pm.expect(allowedCuisine).to.include(data.CuisineCategory);",
							"});",
							"",
							"//13 Vitals fields are correct types\"",
							"pm.test(\"Test 13: Vitals fields are correct types\", () => {",
							"    let data = pm.response.json();",
							"    let vitals = data.Vitals;",
							"    let fileIds = Object.keys(vitals);",
							"",
							"    fileIds.forEach(id => {",
							"        let v = vitals[id];",
							"        pm.expect(v.Weight).to.be.a(\"number\");",
							"        pm.expect(v.Height).to.be.a(\"number\");",
							"        pm.expect(v.Temperature).to.be.a(\"number\");",
							"        pm.expect(v.SP).to.be.a(\"number\");",
							"        pm.expect(v.DP).to.be.a(\"number\");",
							"    });",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dietician_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/{{patient_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{patient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PatientIdinvalidAuth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 403",
							"pm.test(\"Test 1 : Status code is 403 since it uses the wrong token\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/{{patient_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{patient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get InvalidPatientID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 404",
							"pm.test(\"Test 1 : Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dietician_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/300000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"300000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PatientIdInvalidAuthType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 401",
							"pm.test(\"Test 1 : Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/{{patient_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{patient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update patient by patientId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Build patientInfo JSON dynamically",
							"let updatePatientInfo = {",
							"    \"FirstName\": pm.iterationData.get(\"updatepatientFirstName\"),",
							"    \"LastName\": pm.iterationData.get(\"updatepatientLastName\"),",
							"    \"ContactNumber\": pm.iterationData.get(\"updatepatientContactNumber\"),",
							"    \"Email\": pm.iterationData.get(\"updatepatientEmail\"),",
							"    \"Allergy\": pm.iterationData.get(\"updatepatientAllergy\"),",
							"    \"FoodPreference\": pm.iterationData.get(\"updateFoodPreference\"),",
							"    \"CuisineCategory\": pm.iterationData.get(\"updatepatientCuisineCategory\"),",
							"    \"DateOfBirth\": pm.iterationData.get(\"updatepatientDateOfBirth\")",
							"};",
							"pm.collectionVariables.set(\"updatePatientInfo\", JSON.stringify(updatePatientInfo));",
							"",
							"// Build vitalInfo JSON dynamically",
							"let vital = {",
							"    \"Height\": pm.iterationData.get(\"updatepatientHeight\"),",
							"    \"Weight\": pm.iterationData.get(\"updatepatientWeight\"),",
							"    \"Temperature\": pm.iterationData.get(\"updatepatientTemp\"),",
							"    \"SP\": pm.iterationData.get(\"updatedpatientSP\"),",
							"    \"DP\": pm.iterationData.get(\"updatedpatientDP\")",
							"};",
							"pm.collectionVariables.set(\"updateVitalInfo\", JSON.stringify(vital));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"let response = pm.response.json();",
							"console.log(\"Response body:\", JSON.stringify(response));",
							"let expectedFirstname = pm.iterationData.get(\"updatepatientFirstName\")",
							"let expectedLastname = pm.iterationData.get(\"updatepatientLastName\")",
							"",
							"let expectedContactNumber = Number(pm.iterationData.get(\"updatepatientContactNumber\"))",
							"let expectedpatientEmail = pm.iterationData.get(\"updatepatientEmail\")",
							"",
							"// Get expected values from CSV or iteration data",
							"let expectedWeight = Number(pm.iterationData.get(\"updatepatientHeight\"));",
							"let expectedHeight = Number(pm.iterationData.get(\"updatepatientHeight\"));",
							"let expectedTemperature = Number(pm.iterationData.get(\"updatepatientTemp\"));",
							"let expectedSP = Number(pm.iterationData.get(\"updatedpatientSP\"));",
							"let expectedDP = Number(pm.iterationData.get(\"updatedpatientDP\"));",
							"",
							"console.log(\"expectedFirstname is :\",expectedFirstname)",
							"console.log(\"expectedLastname is :\",expectedLastname)",
							"console.log(\"expectedContactNumber is :\",expectedContactNumber)",
							"console.log(\"expectedpatientEmail is :\",expectedpatientEmail)",
							"pm.test(\"FirstName updated correctly\", function () {",
							"    pm.expect(response.FirstName).to.eql(expectedFirstname);",
							"});",
							"",
							"pm.test(\"LastName updated correctly\", function () {",
							"    pm.expect(response.LastName).to.eql(expectedLastname);",
							"});",
							"",
							"",
							"pm.test(\"ContactNumber updated correctly\", function () {",
							"    pm.expect(Number(response.ContactNumber)).to.eql(expectedContactNumber);",
							"});",
							"",
							"pm.test(\"Email updated correctly\", function () {",
							"    pm.expect(response.Email).to.eql(expectedpatientEmail);",
							"});",
							"// Loop through each vitals record",
							"let vitals = response.Vitals;",
							"for (let key in vitals) {",
							"    if (vitals.hasOwnProperty(key)) {",
							"        let record = vitals[key];",
							"",
							"        pm.test(`Weight for record ${key} matches expected`, function () {",
							"            pm.expect(record.Weight).to.eql(expectedWeight);",
							"        });",
							"",
							"        pm.test(`Height for record ${key} matches expected`, function () {",
							"            // Using closeTo for minor floating-point differences",
							"            pm.expect(record.Height).to.be.closeTo(expectedHeight, 0.01);",
							"        });",
							"",
							"        pm.test(`Temperature for record ${key} matches expected`, function () {",
							"            pm.expect(record.Temperature).to.eql(expectedTemperature);",
							"        });",
							"",
							"        pm.test(`SP for record ${key} matches expected`, function () {",
							"            pm.expect(record.SP).to.eql(expectedSP);",
							"        });",
							"",
							"        pm.test(`DP for record ${key} matches expected`, function () {",
							"            pm.expect(record.DP).to.eql(expectedDP);",
							"        });",
							"    }",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dietician_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "patientInfo",
							"value": "{{updatePatientInfo}}",
							"type": "text"
						},
						{
							"key": "vitals",
							"value": "{{updateVitalInfo}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseURL}}/patient/{{patient_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{patient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete patient by userId Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dietician_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/{{patient_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{patient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete information of dietician with the given id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/dietician/{{dietician_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"dietician",
						"{{dietician_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "dietician_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "dietician_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "login_Password",
			"value": "",
			"type": "string"
		},
		{
			"key": "dietician_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "patient_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "patientInfo",
			"value": "",
			"type": "string"
		},
		{
			"key": "updatePatientInfo",
			"value": "",
			"type": "string"
		},
		{
			"key": "fileID",
			"value": "",
			"type": "string"
		},
		{
			"key": "vitalInfo",
			"value": "",
			"type": "string"
		},
		{
			"key": "updateVitalInfo",
			"value": "",
			"type": "string"
		}
	]
}